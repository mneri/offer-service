/*
 * Copyright 2020 Massimo Neri <hello@mneri.me>
 *
 * This file is part of mneri/offer-service.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
}

group = 'me.mneri'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'

    compileOnly 'org.projectlombok:lombok:1.18.16'

    implementation 'org.mapstruct:mapstruct:1.4.1.Final'
    implementation 'org.owasp.esapi:esapi:2.2.2.0'
    implementation 'org.springdoc:springdoc-openapi-core:1.1.49'
    implementation 'org.springdoc:springdoc-openapi-ui:1.1.49'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'

    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.5.4'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file("build/generated/sources/annotationProcessor/java")
}

sourceSets.main.java.srcDirs += ["build/generated/sources/annotationProcessor/java"]

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        generatedSourceDirs += file("build/generated/sources/annotationProcessor/java")
    }
}

test {
    useJUnitPlatform()
}
